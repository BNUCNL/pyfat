#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
import subprocess


def main():
    """Main entrance for batch processing of pyfat."""
    parser = argparse.ArgumentParser(description='pyfat for batch processing',
                                     prog='pyfat')
    parser.add_argument('-sf',
                        dest='sessid_file',
                        metavar='sessid file',
                        required=True,
                        help='a session ID file containing all subjects')
    parser.add_argument('-subpath',
                        dest='sub_path',
                        metavar='subjects path',
                        required=False,
                        type=str,
                        help='a session path containing all subjects')
    parser.add_argument('-dest',
                        dest='dest',
                        metavar='destination directory',
                        required=False,
                        type=str,
                        help='specify a directory where output file should be')
    parser.add_argument('-pipeline',
                        dest='pipeline',
                        metavar='commands of pipeline to execute',
                        required=True,
                        type=str,
                        help='specify commands to execute')
    parser.add_argument('-exe_ord',
                        dest='exe_ord',
                        metavar='order of commands execution: BFS Breadth First Search; DFS Depth First Search',
                        required=False,
                        type=str,
                        choices=['BFS', 'DFS'],
                        default='BFS',
                        help='order of commands execution: first subjects or first commands')
    parser.add_argument('-add_cmd',
                        nargs='+',
                        dest='add_cmd',
                        metavar='add commands to pipeline',
                        required=False,
                        type=str,
                        help='add commands to pipeline: commands or commands file')
    parser.add_argument('-remove_cmd',
                        # nargs='+',
                        dest='remove_cmd',
                        metavar='remove commands from pipeline',
                        required=False,
                        type=str,
                        help='remove commands from pipeline: commands or commands file')
    parser.add_argument('-cmd_view',
                        dest='cmd_view',
                        metavar='display commands in pipeline',
                        required=False,
                        type=bool,
                        default=False,
                        help='display commands in pipeline, default False')

    args = parser.parse_args()

    if not args.sub_path:
        args.sub_path = os.getcwd()

    with open(args.sessid_file, 'r') as f:
        sessid = f.readlines()
        sessid = [_.strip() for _ in sessid]

    if not args.dest:
        args.dest = os.getcwd()

    with open(args.pipeline, 'rw') as f_p:
        pip_id = f_p.readlines()
        pip_id = [_.strip() for _ in pip_id]

    if args.cmd_view:
        print pip_id

    if args.add_cmd:
        pip_id.insert(int(args.add_cmd[1]), args.add_cmd[0])

    if args.remove_cmd:
        pip_id.remove(args.remove_cmd)

    if args.exe_ord == 'BFS':
        for cmds in pip_id:
            for sess in sessid:
                pre_subjects_path = os.path.join(args.sub_path, sess)
                subprocess.call(cmds.format(subjects_path_id=pre_subjects_path, destination_path=args.dest), shell=True)

    if args.exe_ord == 'DFS':
        for sess in sessid:
            for cmds in pip_id:
                pre_subjects_path = os.path.join(args.sub_path, sess)
                subprocess.call(cmds.format(subjects_path_id=pre_subjects_path, destination_path=args.dest), shell=True)


if __name__ == '__main__':
    main()
